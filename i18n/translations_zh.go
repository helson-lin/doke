package i18n

// 中文翻译
var zhTranslations = map[string]string{
	// 通用消息
	"version":   "版本",
	"help":      "帮助",
	"error":     "错误",
	"success":   "成功",
	"warning":   "警告",
	"info":      "信息",
	"cancel":    "取消",
	"confirm":   "确认",
	"yes":       "是",
	"no":        "否",
	"loading":   "加载中",
	"completed": "完成",
	"failed":    "失败",

	// 根命令
	"root.short": "将 Docker 容器配置转换为 docker run 命令",
	"root.long":  "Doke 是一个强大的 Docker 管理工具，可以帮助您：\n- 将运行中的容器转换为 docker run 命令\n- 生成 Docker Compose 配置文件\n- 清理未使用的 Docker 资源\n- 实时监控容器状态\n- 配置镜像代理源",

	// 版本命令
	"version.current": "当前版本: %s",
	"version.print":   "打印版本信息",
	"version.short":   "显示版本信息",
	"version.long":    "显示 Doke 的版本信息",

	// 语言命令
	"lang.short": "切换语言设置",
	"lang.long":  "切换应用程序的语言设置，支持中文(zh)和英文(en)",

	// 清理命令
	"clear.short":                    "自动化清理未使用的 Docker 资源，释放系统空间",
	"clear.long":                     "自动化清理未使用的 Docker 资源，包括：\n- 停止的容器\n- 悬空或未使用的镜像\n- 未使用的网络\n- 未使用的卷\n\n清理操作会显示详细的统计信息和回收的空间大小。",
	"clear.flag.all":                 "清理所有未使用的镜像（不仅仅是悬空镜像）",
	"clear.flag.force":               "强制清理，跳过确认提示",
	"clear.flag.info":                "显示详细的 Docker 系统信息",
	"clear.starting":                 "🧹 开始 Docker 资源清理...",
	"clear.current_usage":            "📊 当前 Docker 资源使用情况:",
	"clear.containers":               "📦 容器: %d 个 (运行中: %d, 已停止: %d)",
	"clear.images":                   "🖼️  镜像: %d 个 (悬空: %d 个, 总大小: %.2f GB)",
	"clear.networks":                 "🌐 网络: %d 个 (自定义: %d 个)",
	"clear.volumes":                  "💾 卷: %d 个",
	"clear.confirm_title":            "⚠️  即将执行以下清理操作:",
	"clear.confirm_containers":       "• 删除已停止的容器",
	"clear.confirm_images_all":       "• 删除所有未使用的镜像",
	"clear.confirm_images_dangling":  "• 删除悬空镜像 (dangling images)",
	"clear.confirm_networks":         "• 删除未使用的网络",
	"clear.confirm_volumes":          "• 删除未使用的卷",
	"clear.confirm_prompt":           "❓ 确认继续清理操作？(y/N): ",
	"clear.cancelled":                "❌ 清理操作已取消",
	"clear.starting_cleanup":         "🚀 开始清理操作...",
	"clear.cleaning_containers":      "🗑️  清理停止的容器... ",
	"clear.cleaning_images":          "🖼️  清理镜像... ",
	"clear.cleaning_images_all":      "🖼️  清理所有未使用的镜像... ",
	"clear.cleaning_images_dangling": "🖼️  清理悬空镜像... ",
	"clear.cleaning_networks":        "🌐 清理未使用的网络... ",
	"clear.cleaning_volumes":         "💾 清理未使用的卷... ",
	"clear.containers_removed":       "✅ 已删除 %d 个停止的容器",
	"clear.images_removed":           "✅ 已删除 %d 个镜像，回收空间 %.2f MB",
	"clear.networks_removed":         "✅ 已删除 %d 个未使用的网络",
	"clear.volumes_removed":          "✅ 已删除 %d 个未使用的卷，回收空间 %.2f MB",
	"clear.results_title":            "🎉 清理完成！",
	"clear.results_stats":            "📊 清理统计:",
	"clear.results_containers":       "📦 容器: %d 个",
	"clear.results_images":           "🖼️  镜像: %d 个",
	"clear.results_networks":         "🌐 网络: %d 个",
	"clear.results_volumes":          "💾 卷: %d 个",
	"clear.results_space":            "💽 回收空间: %.2f MB",
	"clear.already_clean":            "✨ 系统已经很干净了，没有需要清理的资源！",

	// 系统信息
	"sysinfo.getting":          "🔍 获取详细系统信息...",
	"sysinfo.title":            "🐳 Docker 系统信息:",
	"sysinfo.version":          "版本: %s",
	"sysinfo.containers_total": "容器总数: %d (运行中: %d, 暂停: %d, 停止: %d)",
	"sysinfo.images_total":     "镜像总数: %d",
	"sysinfo.storage_driver":   "存储驱动: %s",
	"sysinfo.root_dir":         "根目录: %s",
	"sysinfo.disk_usage":       "总磁盘使用: %.2f GB",
	"sysinfo.disk_layers":      "- 镜像层: %.2f GB",
	"sysinfo.disk_cache":       "- 构建缓存: %.2f GB",
	"sysinfo.system_time":      "系统时间: %s",

	// 检查命令
	"inspect.short":              "实时监控容器运行状态、资源使用情况和日志",
	"inspect.long":               "实时监控指定容器的运行状态，包括：\n- 基本信息（名称、ID、镜像、状态等）\n- 实时资源使用情况（CPU、内存、网络）\n- 实时日志输出\n- 端口映射和卷挂载信息\n\n使用 Ctrl+C 可以退出监控。",
	"inspect.container_name":     "📦 容器名称: %s",
	"inspect.container_id":       "🏷️  容器ID: %s",
	"inspect.image":              "🖼️  镜像: %s",
	"inspect.status":             "📍 状态: %s",
	"inspect.uptime":             "⏰ 运行时间: %s",
	"inspect.port_mappings":      "🌐 端口映射:",
	"inspect.port_mapping":       "   %s -> %s",
	"inspect.volume_mounts":      "💾 卷挂载:",
	"inspect.volume_mount":       "   %s -> %s (%s)",
	"inspect.monitoring_start":   "🔍 开始实时监控容器状态...",
	"inspect.monitoring_tip":     "💡 按 Ctrl+C 退出监控",
	"inspect.monitoring_stopped": "👋 监控已停止",
	"inspect.stats_format":       "📊 CPU: %.2f%% | 💾 内存: %.1fMB/%.1fMB (%.1f%%) | 🌐 网络: ↓%.1fMB ↑%.1fMB",
	"inspect.recent_logs":        "📜 最近日志:",

	// 命令转换
	"command.short":             "将 Docker 容器转换为 docker run 命令",
	"command.long":              "将运行中的 Docker 容器转换为等效的 docker run 命令或生成 Docker Compose 配置文件",
	"command.flag.json":         "导出 docker compose 文件",
	"command.compose_confirm":   "是否将 Docker Compose 配置写入文件 %s？(y/n): ",
	"command.compose_cancelled": "用户取消操作。",
	"command.completion":        "为指定的shell生成自动补全脚本",
	"command.compose_written":   "Docker Compose 配置已成功写入文件: %s",
	"completion.short":          "为指定的shell生成自动补全脚本",
	"completion.long":           "为指定的shell生成自动补全脚本。\n有关如何使用生成的脚本的详细信息，请参阅每个子命令的帮助。",
	"help.short":                "显示任何命令的帮助信息",
	"help.long":                 "显示任何命令的帮助信息。",

	// 代理命令
	"proxy.short":                  "自动设置 Docker 镜像源地址",
	"proxy.long":                   "自动配置 Docker 镜像源地址，支持 Linux 和 macOS 系统，提高镜像拉取速度",
	"proxy.docker_running":         "Docker 正在运行",
	"proxy.docker_not_running":     "Docker 未运行",
	"proxy.orbstack_running":       "OrbStack 正在运行",
	"proxy.orbstack_stopped":       "OrbStack 已停止",
	"proxy.status_running":         "正在运行",
	"proxy.status_stopped":         "已停止",
	"proxy.linux_start_config":     "🚀 开始配置 Linux Docker 镜像源...",
	"proxy.start_config":           "🚀 开始配置 Docker 镜像源...",
	"proxy.reading_config":         "📁 读取 Docker 配置文件...",
	"proxy.read_config_success":    "✅ 成功读取 Docker 配置文件",
	"proxy.parsing_config":         "🔍 解析配置文件...",
	"proxy.parse_config_success":   "✅ 成功解析配置文件",
	"proxy.checking_mirrors":       "🔍 检查现有镜像源配置...",
	"proxy.no_existing_mirrors":    "📋 未发现现有镜像源配置，将创建新的配置",
	"proxy.empty_mirrors":          "📋 现有镜像源配置为空，将创建新的配置",
	"proxy.invalid_mirrors_format": "⚠️  现有镜像源格式不正确，将创建新的配置",
	"proxy.empty_mirrors_list":     "📋 现有镜像源列表为空，将创建新的配置",
	"proxy.existing_mirrors":       "📋 发现现有镜像源: %v",
	"proxy.adding_mirrors":         "🔄 正在添加镜像源: %v",
	"proxy.mirror_added":           "✅ 添加镜像源: %s",
	"proxy.mirror_exists":          "⏭️  镜像源已存在，跳过: %s",
	"proxy.final_mirrors":          "📝 最终镜像源列表: %v",
	"proxy.saving_config":          "💾 保存配置文件...",
	"proxy.serialize_success":      "✅ 成功序列化配置文件",
	"proxy.write_config_success":   "✅ 成功写入配置文件",
	"proxy.reloading_daemon":       "🔄 重新加载系统服务...",
	"proxy.daemon_reload_success":  "✅ 成功重新加载系统服务",
	"proxy.restarting_docker":      "🔄 重启 Docker 服务...",
	"proxy.restart_docker_success": "✅ 成功重启 Docker 服务",
	"proxy.linux_config_complete":  "🎉 Linux Docker 镜像源配置完成！",
	"proxy.config_complete":        "🎉 Docker 镜像源配置完成！",
	"proxy.config_path":            "📁 配置文件路径: %s",

	// 错误消息
	"error.docker_client":                 "❌ 创建 Docker 客户端失败: %v",
	"error.container_config":              "❌ 获取容器配置失败: %v",
	"error.container_list":                "❌ 获取容器列表失败: %v",
	"error.container_remove":              "❌ 删除容器 %s 失败: %v",
	"error.image_prune":                   "❌ 清理镜像失败: %v",
	"error.network_prune":                 "❌ 清理网络失败: %v",
	"error.volume_prune":                  "❌ 清理卷失败: %v",
	"error.system_info":                   "❌ 获取系统信息失败: %v",
	"error.container_stats":               "❌ 获取容器统计信息失败: %v",
	"error.container_logs":                "❌ 获取容器日志失败: %v",
	"error.read_logs":                     "❌ 读取日志失败: %v",
	"error.read_config":                   "❌ 读取配置文件失败: %v",
	"error.parse_config":                  "❌ 解析配置文件失败: %v",
	"error.serialize_config":              "❌ 序列化配置文件失败: %v",
	"error.write_config":                  "❌ 写入配置文件失败: %v",
	"error.write_file":                    "❌ 写入文件失败: %v",
	"error.read_user_input":               "❌ 读取用户输入失败: %v",
	"error.daemon_reload":                 "❌ 执行 systemctl daemon-reload 失败: %v",
	"error.restart_docker":                "❌ 重启 Docker 服务失败: %v",
	"error.get_home_dir":                  "❌ 获取用户主目录失败: %v",
	"error.get_current_dir":               "❌ 获取当前目录失败: %v",
	"error.docker_version_check":          "❌ 检查 Docker 版本失败: %v",
	"error.docker_version_check_failed":   "Docker 版本检查失败",
	"error.docker_status_check":           "❌ 检查 Docker 状态失败: %v",
	"error.docker_status_check_failed":    "Docker 状态检查失败",
	"error.orbstack_version_check":        "❌ 检查 OrbStack 版本失败",
	"error.orbstack_version_check_failed": "OrbStack 版本检查失败",
	"error.read_daemon_json":              "❌ 读取 daemon.json 失败",
	"error.parse_daemon_json":             "❌ 解析 daemon.json 失败",
	"error.write_daemon_json":             "❌ 写入 daemon.json 失败",
	"error.read_config_file":              "❌ 读取配置文件失败: %v",
	"error.parse_config_file":             "❌ 解析配置文件失败: %v",
	"error.write_config_file":             "❌ 写入配置文件失败: %v",
	"error.docker_not_installed":          "❌ 请确保 Docker 已安装",
	"error.orbstack_not_installed":        "❌ 请确保 OrbStack 已安装",

	// 状态消息
	"status.docker_running":   "Docker 正在运行",
	"status.docker_stopped":   "Docker 已停止",
	"status.orbstack_running": "orbStack 正在运行",
	"status.orbstack_stopped": "orbStack 已停止",

	// 安装检查
	"check.docker_ensure":   "请确保 Docker 已安装",
	"check.orbstack_ensure": "请确保 orbStack 已安装",
}
