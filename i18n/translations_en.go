package i18n

// 英文翻译
var enTranslations = map[string]string{
	// General messages
	"version":   "Version",
	"help":      "Help",
	"error":     "Error",
	"success":   "Success",
	"warning":   "Warning",
	"info":      "Info",
	"cancel":    "Cancel",
	"confirm":   "Confirm",
	"yes":       "Yes",
	"no":        "No",
	"loading":   "Loading",
	"completed": "Completed",
	"failed":    "Failed",

	// Root command
	"root.short": "Convert Docker container config to docker run command",
	"root.long":  "Doke is a powerful Docker management tool that helps you:\n- Convert running containers to docker run commands\n- Generate Docker Compose configuration files\n- Clean up unused Docker resources\n- Monitor container status in real-time\n- Configure image proxy sources",

	// Version command
	"version.current": "Current Version: %s",
	"version.print":   "Print version information",
	"version.short":   "Show version information",
	"version.long":    "Show Doke version information",

	// Language command
	"lang.short": "Switch language settings",
	"lang.long":  "Switch application language settings, supports Chinese (zh) and English (en)",

	// Clear command
	"clear.short":                    "Automated cleanup of unused Docker resources to free up system space",
	"clear.long":                     "Automated cleanup of unused Docker resources, including:\n- Stopped containers\n- Dangling or unused images\n- Unused networks\n- Unused volumes\n\nThe cleanup operation displays detailed statistics and the amount of space reclaimed.",
	"clear.flag.all":                 "Clean all unused images (not just dangling images)",
	"clear.flag.force":               "Force cleanup, skip confirmation prompts",
	"clear.flag.info":                "Show detailed Docker system information",
	"clear.starting":                 "🧹 Starting Docker resource cleanup...",
	"clear.current_usage":            "📊 Current Docker resource usage:",
	"clear.containers":               "📦 Containers: %d (Running: %d, Stopped: %d)",
	"clear.images":                   "🖼️  Images: %d (Dangling: %d, Total size: %.2f GB)",
	"clear.networks":                 "🌐 Networks: %d (Custom: %d)",
	"clear.volumes":                  "💾 Volumes: %d",
	"clear.confirm_title":            "⚠️  The following cleanup operations will be performed:",
	"clear.confirm_containers":       "• Remove stopped containers",
	"clear.confirm_images_all":       "• Remove all unused images",
	"clear.confirm_images_dangling":  "• Remove dangling images",
	"clear.confirm_networks":         "• Remove unused networks",
	"clear.confirm_volumes":          "• Remove unused volumes",
	"clear.confirm_prompt":           "❓ Confirm to continue cleanup operation? (y/N): ",
	"clear.cancelled":                "❌ Cleanup operation cancelled",
	"clear.starting_cleanup":         "🚀 Starting cleanup operation...",
	"clear.cleaning_containers":      "🗑️  Cleaning stopped containers... ",
	"clear.cleaning_images":          "🖼️  Cleaning images... ",
	"clear.cleaning_images_all":      "🖼️  Cleaning all unused images... ",
	"clear.cleaning_images_dangling": "🖼️  Cleaning dangling images... ",
	"clear.cleaning_networks":        "🌐 Cleaning unused networks... ",
	"clear.cleaning_volumes":         "💾 Cleaning unused volumes... ",
	"clear.containers_removed":       "✅ Removed %d stopped containers",
	"clear.images_removed":           "✅ Removed %d images, reclaimed %.2f MB",
	"clear.networks_removed":         "✅ Removed %d unused networks",
	"clear.volumes_removed":          "✅ Removed %d unused volumes, reclaimed %.2f MB",
	"clear.results_title":            "🎉 Cleanup completed!",
	"clear.results_stats":            "📊 Cleanup statistics:",
	"clear.results_containers":       "📦 Containers: %d",
	"clear.results_images":           "🖼️  Images: %d",
	"clear.results_networks":         "🌐 Networks: %d",
	"clear.results_volumes":          "💾 Volumes: %d",
	"clear.results_space":            "💽 Space reclaimed: %.2f MB",
	"clear.already_clean":            "✨ System is already clean, no resources to cleanup!",

	// System info
	"sysinfo.getting":          "🔍 Getting detailed system information...",
	"sysinfo.title":            "🐳 Docker System Information:",
	"sysinfo.version":          "Version: %s",
	"sysinfo.containers_total": "Total containers: %d (Running: %d, Paused: %d, Stopped: %d)",
	"sysinfo.images_total":     "Total images: %d",
	"sysinfo.storage_driver":   "Storage driver: %s",
	"sysinfo.root_dir":         "Root directory: %s",
	"sysinfo.disk_usage":       "Total disk usage: %.2f GB",
	"sysinfo.disk_layers":      "- Image layers: %.2f GB",
	"sysinfo.disk_cache":       "- Build cache: %.2f GB",
	"sysinfo.system_time":      "System time: %s",

	// Inspect command
	"inspect.short":              "Real-time monitoring of container status, resource usage and logs",
	"inspect.long":               "Real-time monitoring of specified container status, including:\n- Basic information (name, ID, image, status, etc.)\n- Real-time resource usage (CPU, memory, network)\n- Real-time log output\n- Port mappings and volume mounts\n\nUse Ctrl+C to exit monitoring.",
	"inspect.container_name":     "📦 Container name: %s",
	"inspect.container_id":       "🏷️  Container ID: %s",
	"inspect.image":              "🖼️  Image: %s",
	"inspect.status":             "📍 Status: %s",
	"inspect.uptime":             "⏰ Uptime: %s",
	"inspect.port_mappings":      "🌐 Port mappings:",
	"inspect.port_mapping":       "   %s -> %s",
	"inspect.volume_mounts":      "💾 Volume mounts:",
	"inspect.volume_mount":       "   %s -> %s (%s)",
	"inspect.monitoring_start":   "🔍 Starting real-time container monitoring...",
	"inspect.monitoring_tip":     "💡 Press Ctrl+C to exit monitoring",
	"inspect.monitoring_stopped": "👋 Monitoring stopped",
	"inspect.stats_format":       "📊 CPU: %.2f%% | 💾 Memory: %.1fMB/%.1fMB (%.1f%%) | 🌐 Network: ↓%.1fMB ↑%.1fMB",
	"inspect.recent_logs":        "📜 Recent logs:",

	// Command conversion
	"command.short":             "Convert Docker container to docker run command",
	"command.long":              "Convert running Docker container to equivalent docker run command or generate Docker Compose configuration file",
	"command.flag.json":         "Export docker compose file",
	"command.compose_confirm":   "Write Docker Compose configuration to file %s? (y/n): ",
	"command.compose_cancelled": "User cancelled operation.",
	"command.compose_written":   "Docker Compose configuration successfully written to file: %s",
	"completion.short":          "Generate the autocompletion script for the specified shell",
	"completion.long":           "Generate the autocompletion script for the specified shell.\nSee each sub-command's help for details on how to use the generated script.",
	"help.short":                "Help about any command",
	"help.long":                 "Help provides help for any command in the application.",

	// Proxy command
	"proxy.short":                  "Automatically set Docker image source address",
	"proxy.long":                   "Automatically configure Docker image source address, supports Linux and macOS systems, improves image pull speed",
	"proxy.docker_running":         "Docker is running",
	"proxy.docker_not_running":     "Docker is not running",
	"proxy.orbstack_running":       "OrbStack is running",
	"proxy.orbstack_stopped":       "OrbStack is stopped",
	"proxy.status_running":         "Running",
	"proxy.status_stopped":         "Stopped",
	"proxy.linux_start_config":     "🚀 Starting Linux Docker image source configuration...",
	"proxy.start_config":           "🚀 Starting Docker image source configuration...",
	"proxy.reading_config":         "📁 Reading Docker configuration file...",
	"proxy.read_config_success":    "✅ Successfully read Docker configuration file",
	"proxy.parsing_config":         "🔍 Parsing configuration file...",
	"proxy.parse_config_success":   "✅ Successfully parsed configuration file",
	"proxy.checking_mirrors":       "🔍 Checking existing image source configuration...",
	"proxy.no_existing_mirrors":    "📋 No existing image source configuration found, creating new configuration",
	"proxy.empty_mirrors":          "📋 Existing image source configuration is empty, creating new configuration",
	"proxy.invalid_mirrors_format": "⚠️  Existing image source format is incorrect, creating new configuration",
	"proxy.empty_mirrors_list":     "📋 Existing image source list is empty, creating new configuration",
	"proxy.existing_mirrors":       "📋 Found existing image sources: %v",
	"proxy.adding_mirrors":         "🔄 Adding image sources: %v",
	"proxy.mirror_added":           "✅ Added image source: %s",
	"proxy.mirror_exists":          "⏭️  Image source already exists, skipping: %s",
	"proxy.final_mirrors":          "📝 Final image source list: %v",
	"proxy.saving_config":          "💾 Saving configuration file...",
	"proxy.serialize_success":      "✅ Successfully serialized configuration file",
	"proxy.write_config_success":   "✅ Successfully wrote configuration file",
	"proxy.reloading_daemon":       "🔄 Reloading system services...",
	"proxy.daemon_reload_success":  "✅ Successfully reloaded system services",
	"proxy.restarting_docker":      "🔄 Restarting Docker service...",
	"proxy.restart_docker_success": "✅ Successfully restarted Docker service",
	"proxy.linux_config_complete":  "🎉 Linux Docker image source configuration completed!",
	"proxy.config_complete":        "🎉 Docker image source configuration completed!",
	"proxy.config_path":            "📁 Configuration file path: %s",

	// Error messages
	"error.docker_client":                 "❌ Failed to create Docker client: %v",
	"error.container_config":              "❌ Failed to get container configuration: %v",
	"error.container_list":                "❌ Failed to get container list: %v",
	"error.container_remove":              "❌ Failed to remove container %s: %v",
	"error.image_prune":                   "❌ Failed to prune images: %v",
	"error.network_prune":                 "❌ Failed to prune networks: %v",
	"error.volume_prune":                  "❌ Failed to prune volumes: %v",
	"error.system_info":                   "❌ Failed to get system information: %v",
	"error.container_stats":               "❌ Failed to get container statistics: %v",
	"error.container_logs":                "❌ Failed to get container logs: %v",
	"error.read_logs":                     "❌ Failed to read logs: %v",
	"error.read_config":                   "❌ Failed to read configuration file: %v",
	"error.parse_config":                  "❌ Failed to parse configuration file: %v",
	"error.serialize_config":              "❌ Failed to serialize configuration file: %v",
	"error.write_config":                  "❌ Failed to write configuration file: %v",
	"error.write_file":                    "❌ Failed to write file: %v",
	"error.read_user_input":               "❌ Failed to read user input: %v",
	"error.daemon_reload":                 "❌ Failed to execute systemctl daemon-reload: %v",
	"error.restart_docker":                "❌ Failed to restart Docker service: %v",
	"error.get_home_dir":                  "❌ Failed to get user home directory: %v",
	"error.get_current_dir":               "❌ Failed to get current directory: %v",
	"error.docker_version_check":          "❌ Failed to check Docker version: %v",
	"error.docker_version_check_failed":   "Docker version check failed",
	"error.docker_status_check":           "❌ Failed to check Docker status: %v",
	"error.docker_status_check_failed":    "Docker status check failed",
	"error.orbstack_version_check":        "❌ Failed to check OrbStack version",
	"error.orbstack_version_check_failed": "OrbStack version check failed",
	"error.read_daemon_json":              "❌ Failed to read daemon.json",
	"error.parse_daemon_json":             "❌ Failed to parse daemon.json",
	"error.write_daemon_json":             "❌ Failed to write daemon.json",
	"error.read_config_file":              "❌ Failed to read configuration file: %v",
	"error.parse_config_file":             "❌ Failed to parse configuration file: %v",
	"error.write_config_file":             "❌ Failed to write configuration file: %v",
	"error.docker_not_installed":          "❌ Make sure Docker is installed",
	"error.orbstack_not_installed":        "❌ Make sure OrbStack is installed",

	// Status messages
	"status.docker_running":   "Docker is running",
	"status.docker_stopped":   "Docker is stopped",
	"status.orbstack_running": "orbStack is running",
	"status.orbstack_stopped": "orbStack is stopped",

	// Installation checks
	"check.docker_ensure":   "Make sure Docker is installed",
	"check.orbstack_ensure": "Make sure orbStack is installed",
}
